Generics:
-- All things generic constraints (functions, classes, sup-blocks, member access).
-- Sup scopes for certain generics only.
-- Function specialization.

Binary expressions:
-- Rearrange from parsed AST order to correct AST order (current implementation is bugged).

Coroutines:
-- Check the sent objects' type against the `Send` generic parameter.
-- Copy `async` function call borrow rules for coroutines? Borrows could be invalidated between wait points.

Sup classes:
-- Ensure overridden methods exist on the `sup` class.
-- Allow specialization of sup-class methods in the `sup` block.

Object initialization:
-- Sup initialization

Placeholders:
-- Placeholders in `let` and `patterns` (use the `_` character)
-- Use to shorthand partial functions? => convert into lambdas?

Patterns:
-- Don't mark destructure variables as "moved" until the entire "case" expression is done (could be destructured on multiple branches)
-- Convert operator to function + analyse function call (ie `1.eq(2)` from `1 then == 2`)
-- Semantics for `is ...`.
-- Binary field access ie `case object then .empty() { ... } .is_value() { ... } etc`

Tuples:
-- Change binary folding to create a chain of binary calls, not just first 2 ops => `1.add(2).add(3)` etc)
-- Tuple function folding: fold-able tuples need to be marked as so, then the function fold only folds those tuples.
-- Tuple unpacking into parameters ie `function_call(..tuple)`
-- Tuple destructuring with ".." in the middle assigns wrong types to variables on the right of ".."
-- Check memory rules apply to multiple values inside tuples

Functions:
-- The `Self` type needs to change for parameter types.
-- Non-single variable parameters, like `fun func(Point(x, y): Point)`
-- What about a param like: "fun func(Point(x, y): &Point)"? Can't move "x" and "y" from "&Point"
-- Reject overlapping overloads ie `func()` and `func(a: U32 = 1)` are overlapping
-- Re-add the "cannot use self in module function" check (removed for false positives)
-- The `self` argument is not generated for non-identifier functions: generate a `self` for any lhs except TypeAst (static functions).

Typedefs:
-- Importing typedefs (see TypedefStatementAst::generate() comments).
-- Sup-typedefs.

Other:
-- Global constants move semantics (not movable). Add a GlobalConstantAst?
-- The GlobalConstantAst will be used for function -> class conversions, removing the need for `_sup_let_type`
-- Special `Copy` type that doesn't "move" the value.
-- Prevent type redeclaration in the same scope.

