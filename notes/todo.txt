NOW

Generics:
-- All things generic constraints (functions, classes, sup-blocks, member access).
-- Sup scopes for certain generics only.
-- Function specialization.
-- Using different generic identifiers for sup->cls doesn't work (currently have to be the same).

Pins:
-- Cannot unpin a value being borrowed by an async function unless await has been called on the corresponding future.
-- Can unpin a value being borrowed by a coroutine, but the coroutine will be invalidated.
-- A coroutine or future is pinned if any of its arguments are pinned (ie are borrowed from a pinned value).

Object initialization:
-- Sup initialization
    -- Replace sup-scopes with the generically-filled scopes?
    -- What about inheriting the same superclass with different generics?)

Functions:
-- Re-add the "cannot use self in module function" check (removed for false positives)
-- Generic fall-through for sup-inheritance blocks => see sup-initialization.
-- Partial functions? Use "_" to convert functions to lambdas with some values set.
-- Tuple function folding ie "function(a).." needs to call "function" continuously with each element of "a".
-- Take out the check allowing empty-functions to be called (it is for testing purposes only).
-- Overriding a function doesn't remove the base overload from consideration.

Global constants:
-- Extend to allow more than just literals.
-- Check tuples that include non-literals.
-- Prevent unpinning of global constants.
-- How to do arrays given there is no array literal => might need to add one?

Types:
-- Special `Copy` type that doesn't "move" the value.
-- Prevent type redeclaration in the same scope (except `Self`)` - check generics on this too (sup <-> cls).
-- Union types throw generic-oriented errors
-- Numerical type indexing

Expressions:
-- Operations ie `1 + 2`, `2` should be taken by-ref, but there is no way to do this currently.

Self-type:
-- Disallow "Self" being used as a generic argument in "sup" blocks as arguments (recursive types)
-- Disallow "Self" being used as a generic parameter's default value in `cls` blocks (recursive types).

Other:
-- Errors across files (ie conflicting overloads in global scopes of different files), use tokens of the same file - confusing error message.
-- Double analyse `loop` body, avoiding messing up `exit` loop counting.


FUTURE

Typedefs:
-- Remove for now & redo the lot
-- Importing typedefs (see TypedefStatementAst::generate() comments).
-- Sup-typedefs (and check they exist on the superclass; modify existing method checks).
-- Nested typedefs: use std::(ops::Add, ops::Sub) works, but not std::{ops::{Add, Sub}, Vec}
-- Change typedefs to work like "destructures" (recursive) in the parser & analysis.

Patterns:
-- Boolean field access ie `case object then .empty() { ... } .is_value() { ... } etc`
