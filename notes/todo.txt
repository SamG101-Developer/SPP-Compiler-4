Generics:
-- All things generic constraints (functions, classes, sup-blocks, member access).
-- Replace sup-scopes on generic classes with generic conversion fallthrough (into sup-methods etc.)
-- Function specialization.

Binary expressions:
-- Rearrange from parsed AST order to correct AST order (current implementation is bugged).

Coroutines:
-- Apply the Law of Exclusivity to yielded values (inside tuples)
-- Check the sent objects' type against the `Send` generic parameter.

Namespaced types:
-- Allowing `use` to link new type names to namespaced types' class prototypes.

Sup classes
-- Ensure overridden methods exist on the `sup` class.
-- Allow specialisation of sup-class methods in the `sup` block.

Object initialization
-- Sup initialization

Placeholders
-- Placeholders in `let` and `patterns` (use the `_` character)
-- Use to shorthand partial functions? => convert into lambdas?

Patterns:
-- Don't mark destructure variables as "moved" until the entire "case" expression is done (could be destructured on multiple branches)
-- Convert operator to function + analyse function call (ie `1.eq(2)` from `1 then == 2`)
-- Semantics for `is ...`.
-- Binary field access ie `case object then .empty() { ... } .is_value() { ... } etc`

Tuples
-- Tuple operations (unpacking, folding, etc.)
-- Tuple destructuring with ".." in the middle assigns wrong types to variables on the right of ".."
-- Check memory rules apply to multiple values inside tuples

Other
-- The `Self` type needs to change for parameter types.
-- Change parameters to be like local variables, allowing different types like `fun function(Point(x, y): Point) -> Point { ... }`
-- Allow global constants (can't be (partially-)moved, can be copied or "&" though)
-- Static methods not callable from class type (parsing issue)
-- Suggest similar namespaces for undefined namespaces
-- Special `Copy` type that doesn't "move" the value
