Generics:
-- All things generic constraints (functions, classes, sup-blocks, member access).
-- Sup scopes for certain generics only.
-- Function specialization.

Binary expressions:
-- Rearrange from parsed AST order to correct AST order (current implementation is bugged).

Coroutines:
-- Check the sent objects' type against the `Send` generic parameter.
-- Copy `async` function call borrow rules for coroutines? Borrows could be invalidated between wait points.

Sup classes:
-- Ensure overridden methods exist on the `sup` class.
-- Allow specialization of sup-class methods in the `sup` block.

Object initialization:
-- Sup initialization

Patterns:
-- Semantics for `is ...`.
-- Boolean field access ie `case object then .empty() { ... } .is_value() { ... } etc`

Tuples:
-- Tuple function folding: fold-able tuples need to be marked as so, then the function fold only folds those tuples.
-- Tuple unpacking into parameters ie `function_call(..tuple)`
-- Check memory rules apply to multiple values inside tuples

Functions:
-- Inheriting a class requires the `self` argument type-check to match the new sub-class
-- Reject overlapping overloads ie `func()` and `func(a: U32 = 1)` are overlapping
-- Reject ambiguous functions calls where > 1 overload is valid
-- Re-add the "cannot use self in module function" check (removed for false positives)
-- Generic fall-through for sup-inheritance blocks.
-- Partial functions? Use "_" to convert functions to lambdas with some values set.
-- Functions with destructured parameters and no members act as if they have members (destructure is injected).

Typedefs:
-- Importing typedefs (see TypedefStatementAst::generate() comments).
-- Sup-typedefs.
-- Nested typedefs: use std::(ops::Add, ops::Sub) works, but not std::(ops::(Add, Sub)) -- make more cyclic like "let" statements.

Other:
-- Global constants move semantics (not movable). Add a GlobalConstantAst?
-- The GlobalConstantAst will be used for function -> class conversions, removing the need for `_sup_let_type`
-- Special `Copy` type that doesn't "move" the value.
-- Prevent type redeclaration in the same scope (except `Self`)`.
-- Variable declared as uninitialized, initialized only on some branches -> "potentially uninitialized variable" error.
-- Providing too many generics to a type creates an unhandled python error.
-- Operations ie `1 + 2`, `2` should be taken by-ref, but there is no way to do this currently.
