# use MyUnionType = std::Str | std::U64 | std::U32


cls VariantA { a: std::Str }
cls VariantB { b: std::Str }
cls VariantC { c: std::Str }
cls VariantD { d: std::Str }


cls VariantE {
    x: std::Str
    y: std::Str
}


fun test_type_destructure_with_tuple(
        x: VariantA | VariantB | VariantC,
        y: VariantA | VariantB | VariantC) -> std::Void {

    let z = VariantE(x="123", y="456")
    case z then
        is VariantE(x="hello", ..) { let a = y }

    case x then
        is VariantA(mut a) { a = "123" }
        is VariantC(mut c) { c = "false" }
}
