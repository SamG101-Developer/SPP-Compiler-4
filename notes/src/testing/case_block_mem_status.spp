cls Point {
    @public x: std::BigInt
    @public y: std::BigInt
    @public z: std::BigInt
}

cls Joint {
    a: std::BigInt
    b: std::BigInt
}


cls DirVec {
    @public point: Point
    @public dir: std::BigInt
}


fun test_cases(y: std::U32 | std::Str) -> std::Void {
    let x = 123
    case x then
        == 123 { let z = x }
        == 456 { }

    case y then
        is std::U32() { "num" }
        is std::Str() { "str" }

    let apple = ((1, 2), (3, "4"))
    case apple then
        is ((6, 7), (8, mut j)) { j = "1" }
        is ((5, l), mut t) { t = (4, "hello") }
        else { "false" }

    let d = DirVec(point=Point(x=1, y=2, z=3), dir=4)
    case d then
        is DirVec(point=Point(x=1, y=2, z=3), dir=4) and false { "1" }
        is DirVec(point=Point(x, ..), ..) { }

    let t = (1, 2, 3, 4)
    let val = case t then
        is (1, 2, a, mut b) { "123" }
        is (1, 2, 3, 4) { "2" }
        else { "false" }
}
