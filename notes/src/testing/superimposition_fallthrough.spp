mod testing::superimposition_fallthrough


cls TestClass[T] {
    a: T
}

cls OtherBase {
    c: std::Bool
}

sup [T] TestClass[T] {
    fun test_method_a(&self, a: T) -> T { }
    fun test_method_b(&self, b: T) -> T { }
}


cls TestSubClass[T] {
    b: T
}


sup [T] TestSubClass[T] ext TestClass[T] { }

sup [T] TestSubClass[T] ext OtherBase { }


fun test_sup() -> std::Void {
    let test_class = TestClass(a=100)
    let mut x = test_class.test_method_a(1)
    let mut y = test_class.test_method_b(2)
    x = 123

    let o = OtherBase(c=true)

    let sub_class_object = TestSubClass(b=100, sup=(o, test_class))
}
