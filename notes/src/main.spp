mod main


cls Vec3D {
    x: P
    y: P
    z: P
}

cls Velocity {
    direction: Vec3D
    speed: std.BigNum
}

cls P {
    where_: std.BigNum
}


cls AClass { }
sup AClass {
    fun test() -> std.Void { }
}

sup std.Str on AClass { }


fun union_test(x: std.Str | std.BigNum) -> std.Void {
    case x then
        is "hello" { "world" }
        is 123 { "world" }
    else { "other" }
}


fun main(velocity: Velocity) -> std.Void {
    case velocity then
        == Velocity(direction=Vec3D(x=P(where_=1), ..), speed) { "hello" }
    else { "other" }

    let mut a = (1, "hello world", false)
    case a then
        == (x, y, z) { "hello"
            let mut variable = x
            variable = 1
        }
        == (4, 5, 6) { "world" }
    else { "other" }

    let x = 1 + 2
}

##
fun my_coroutine(x: &std.BigNum) -> std.GenRef[Yield=std.BigNum, Return=std.BigNum, Send=std.Void] {
    let number = 123

    gen x
    gen x
    gen &number

    ret 4
}
##

