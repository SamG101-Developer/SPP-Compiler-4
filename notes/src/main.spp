mod main


cls Point {
    x: std::BigInt
    y: std::BigInt
    z: std::BigInt
}

cls Vec {
    point: Point
    dir: std::BigInt
}

sup Vec {
    fun test(&self, other: Vec) -> std::Void { }
}

sup Point {
    fun func(&self, other: &Point) -> std::Void { }
    fun func(&self, other: std::Bool) -> std::Void { }
}

sup Point {
    fun func(&self, other: std::BigInt) -> std::Bool { }
}


fun test[T](a: T, b: T) -> std::Bool { }

fun test[T](a: T) -> std::BigInt {
    let mut x: T
    x = a
    ret 1
}


cls A[T] {
    x: T
    y: T
}

sup [T] A[T] {
    fun function(&self, value: std::Vec[T]) -> std::Void { }
}


fun main(y: &std::BigInt, v99: std::Vec[std::BigInt]) -> std::Void {
    let point = Point(x=100, y=100, z=100)
    let v = Vec(point, dir=100)
    let t = (0, "hello", "by", 1, 2, 3, false, 5)

    let v2 = Vec(point=Point(x=1, y=1, z=1), dir=1)
    let p2 = Point(x=1, y=1, z=1)
    v2.point.func(&p2)

    let v1 = v2

    let aaa = A(x=1, y=2)
    aaa.function(v99)

    let mut x = test(1)
    x = 123

    let (..mut rest, e) = t
    rest = (0, "random", "values", 1, 2, 3, false)

    case v == then
        Vec(point=Point(x, y, z=0), dir) { }
        Vec(point=Point(x, y, z=0), dir=1) { }

    let tuple = (1, 2, 3, 4, 5)
    case tuple == then
        (a, b, _, _, "10") { }
        else {}
}
