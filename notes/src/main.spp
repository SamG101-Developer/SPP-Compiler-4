mod main


cls Vec3D {
    x: P
    y: P
    z: P
}

cls Velocity {
    direction: Vec3D
    speed: std.BigNum
}

cls P {
    where_: std.BigNum
}


fun test[T](vec: std.Vec[std.Vec[T]]) -> std.Str {
    ret "hello"
}

fun some_function() -> std.Void {
    let mut x = 1_u64
    x = 2_u64
}

fun bbb(a: std.Str) -> std.Str {
    ret a
}

fun bbb(a: std.Bool) -> std.Bool {
    ret false
}

fun main(velocity: Velocity) -> std.Void {
    case velocity then
        == Velocity(direction=Vec3D(x=P(where_=1), ..), speed) { "hello" }
        == Velocity(direction=Vec3D(y=P(where_=2), ..), speed) { "world" }
    else { "other" }

    let mut a = (1, "hello world", false)
    case a then
        == (x, y, z) { "hello" }
        == (4, 5, 6) { "world" }
    else { "other" }

    let Velocity(direction, speed) = velocity
    let Vec3D(x, y, ..) = direction
    # let direction2 = direction

    test(std.Vec[std.Vec[std.Str]]())
    let x = std.Opt(value=std.Vec[std.Str]())

    let mut variable = bbb(false)
    variable = false

    loop variable {
        let x = 1
        let y = 2
        let z = 3
    }
    else {
        let p = 1
    }
}


fun coroutine_function() -> std.GenRef[Yield=std.Str] {
    gen &"3456"
    gen "world"
    ret
}
