mod main


cls Vec3D {
    x: P
    y: P
    z: P
}

cls Velocity {
    direction: Vec3D
    speed: std.BigNum
}

cls P {
    where_: std.BigNum
}


fun test[T](vec: std.Vec[std.Vec[T]]) -> std.Str {
    ret "1234"
}

fun main(velocity: Velocity) -> std.Void {
    case velocity then
        == Velocity(direction=Vec3D(x=P(where_=1), ..), speed) { "hello" }
        == Velocity(direction=Vec3D(y=P(where_=2), ..), speed) { "world" }
    else { "other" }

    let mut a = (1, "hello world", false)
    case a then
        == (x, y, z) { "hello" }
        == (4, 5, 6) { "world" }
    else { "other" }

    test(std.Vec[std.Vec[std.Str]]())

    let x = std.Opt(value=std.Vec[std.Str]())
}
