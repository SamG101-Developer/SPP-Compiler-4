mod std::vector


cls Vec[T] {
    # data: Arr[T]
    # length: U64
}

sup [T] Vec[T] {
    # use ValueType as T
    # use SizeType as U64
    # use IndexType as U64
}

sup [T] Vec[T] {
    fun push_head(&mut self, ..items: T) -> Void { }
    fun push_tail(&mut self, ..items: T) -> Void { }
    fun push(&mut self, index: U64, ..items: T) -> Void { }
}

sup [T] Vec[T] {
    fun take_head(&mut self) -> T { }
    fun take_tail(&mut self) -> T { }
    fun take(&mut self, index: U64) -> T { }
}

sup [T] Vec[T] {
    cor get_head_ref(&self) -> GenRef[T] { }
    cor get_tail_ref(&self) -> GenRef[T] { }
    cor get_ref(&self, index: U64) -> GenRef[T] { }
}

sup [T] Vec[T] {
    cor get_head_mut(&mut self) -> GenMut[T] { }
    cor get_tail_mut(&mut self) -> GenMut[T] { }
    cor get_mut(&mut self, index: U64) -> GenMut[T] { }
}

sup [T] Vec[T] {
    fun clear(&mut self) -> Void { }
    fun is_empty(&self) -> Bool { }
}

sup [T] Vec[T] {
    fun resize(&mut self, new_length: U64) -> Void { }
    fun reserve(&mut self, new_capacity: U64) -> Void { }
    fun shrink_to_fit(&mut self) -> Void { }
}

sup [T: Sortable] Sortable[T] on Vec[T] {
    fun sort(&mut self) -> Void { }
    fun sort_by(&mut self, compare: FunRef[Bool, (T, T)]) -> Void { }
}

sup [T] IterMov[T] on Vec[T] {
    # cor iter_mov(self) -> GenMov[T] { }
}

sup [T] IterRef[T] on Vec[T] {
    # cor iter_ref(&self) -> GenRef[T] { }
}

sup [T] IterMut[T] on Vec[T] {
    # cor iter_mut(&mut self) -> GenMut[T] { }
}
